{
  "name": "superstatic",
  "version": "2.2.0",
  "description": "Superstatic: a static file server for fancy apps",
  "main": "./lib",
  "scripts": {
    "test": "npm run lint && npm run test-unit && npm run test-integration",
    "test-unit": "mocha test/unit/**",
    "test-integration": "mocha test/integration/**",
    "lint": "jshint --reporter node_modules/jshint-stylish/stylish.js lib",
    "outdated": "npm outdated --depth 0",
    "audit": "npm shrinkwrap --dev && nsp audit-shrinkwrap || true && rm npm-shrinkwrap.json"
  },
  "author": {
    "name": "Divshot"
  },
  "license": "MIT",
  "bin": {
    "superstatic": "bin/server",
    "ss": "bin/server"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/divshot/superstatic.git"
  },
  "bugs": {
    "url": "https://github.com/divshot/superstatic/issues"
  },
  "keywords": [
    "static",
    "server",
    "divshot",
    "hosting",
    "pushstate",
    "html5",
    "router",
    "file",
    "directory",
    "hash",
    "hashbang"
  ],
  "dependencies": {
    "as-array": "^1.0.0",
    "async": "^0.9.0",
    "basic-auth-connect": "^1.0.0",
    "booly": "^1.0.2",
    "bundles": "^2.0.0",
    "cache-control": "^1.0.3",
    "cache-header": "^1.0.3",
    "caseless": "^0.10.0",
    "chalk": "^1.0.0",
    "char-spinner": "^1.0.1",
    "chokidar": "^1.0.0-rc5",
    "clear-require": "^1.0.1",
    "compare-semver": "^1.0.0",
    "compression": "^1.2.2",
    "connect": "^3.3.3",
    "connect-livereload": "^0.5.2",
    "connect-query": "^0.2.0",
    "cross-spawn": "^0.2.3",
    "destroy": "^1.0.3",
    "etag": "^1.5.1",
    "express": "^4.10.6",
    "fast-url-parser": "^1.1.3",
    "finalhandler": "^0.3.2",
    "firstkey": "^0.1.0",
    "flatten-to-object": "^1.0.0",
    "fs-extra": "^0.17.0",
    "glob": "^5.0.3",
    "glob-slasher": "^1.0.1",
    "globject": "^1.0.0",
    "home-dir": "^1.0.0",
    "install": "^0.1.8",
    "jfig": "^1.2.0",
    "join-path": "^1.0.0",
    "lodash": "^3.1.0",
    "mime-types": "^2.0.4",
    "minimatch": "^2.0.1",
    "morgan": "^1.5.0",
    "nash": "^2.0.0",
    "npmconf": "^2.1.1",
    "on-finished": "^2.2.0",
    "on-headers": "^1.0.0",
    "pretty-print": "^1.0.0",
    "qs": "^2.3.3",
    "redirects": "^1.1.0",
    "router": "^1.0.0",
    "send": "^0.12.1",
    "serve-favicon": "^2.1.7",
    "set-headers": "^1.0.0",
    "string-length": "^1.0.0",
    "through2": "^0.6.3",
    "tiny-lr": "^0.1.5",
    "try-require": "^1.0.0",
    "update-notifier": "^0.3.0"
  },
  "devDependencies": {
    "chai": "^2.1.0",
    "concat-stream": "^1.4.7",
    "jshint": "^2.5.11",
    "jshint-stylish": "^1.0.0",
    "mocha": "^2.0.1",
    "nsp": "^1.0.0",
    "request": "^2.51.0",
    "std-mocks": "^1.0.0",
    "supertest": "^0.15.0"
  },
  "readme": "# Superstatic   [![NPM Module](http://img.shields.io/npm/v/superstatic.svg?style=flat-square)](https://npmjs.org/package/superstatic) [![Build Status](http://img.shields.io/travis/divshot/superstatic.svg?style=flat-square)](https://travis-ci.org/divshot/superstatic)\n\nSuperstatic is an enhanced static web server that was built to power\n[Divshot](http://www.divshot.io). It has fantastic support for HTML5\npushState applications, clean URLs, caching, and MANY other goodies.\n\n## Documentation\n\n* [Installation](#installation)\n* [Usage](#usage)\n* [Configuration](#configuration)\n* [API](#api)\n  * [Middleware](#middleware)\n  * [Server](#server)\n* [Run Tests](#run-tests)\n* [Changelog](https://github.com/divshot/superstatic/blob/master/CHANGELOG.md)\n* [Contributing](#contributing)\n\n\n\n## Installation\n\nSuperstatic should be installed globally using npm:\n\nFor use via CLI\n\n```\n$ npm install -g superstatic\n```\n\nFor use via API\n\n```\nnpm install superstatic --save\n```\n    \n## Usage\n\nBy default, Superstatic will simply serve the current directory on port\n`3474`. This works just like any other static server:\n\n```\n$ superstatic\n```\n\nor aliased as\n\n```\n$ ss\n```\n    \nYou can optionally specify the directory, port and hostname of the server:\n\n```\n$ superstatic public --port 8080 --host 127.0.0.1\n```\n    \nWhere it gets interesting is with Superstatic's JSON configuration file.\n\n## Configuration\n\nSuperstatic reads special configuration from a JSON file (either `superstatic.json`\nor `divshot.json` by default, configurable with `-c`). This JSON file enables\nenhanced static server functionality beyond simply serving files.\n\n**root:** by default, Superstatic will serve the current working directory (or the\nancestor of the current directory that contains the configuration json being used).\nThis configuration key specifies a directory *relative to the configuration file* that\nshould be served. For example, if serving a Jekyll app, this might be set to `\"_site\"`.\nA directory passed as an argument into the command line app supercedes this configuration\ndirective.\n\n**clean_urls:** if `true`, all `.html` files will automatically have their extensions\ndropped. If `.html` is used at the end of a filename, it will perform a 301 redirect\nto the same path with `.html` dropped.\n\nAll paths have clean urls\n\n```json\n{\n  \"clean_urls\": true\n}\n```\n\nOnly specific paths get clean urls\n\n```json\n{\n  \"clean_urls\": [\"/app/**\", \"/!components/**\"]\n}\n```\n\n**routes:** you can specify custom route recognition for your application by supplying\nan object to the routes key. Use a single star `*` to replace one URL segment or a\ndouble star to replace an arbitrary piece of URLs. This works great for single page\napps. An example:\n\n```json\n{\n  \"routes\": {\n    \"app/**\":\"application.html\",\n    \"projects/*/edit\":\"projects.html\"\n  }\n}\n```\n\nNote: There is no guarantee of the order that your routes will be parsed when using only an object. If you need to ensure that your routes are parsed in order, please wrap them in an array. An example:\n\n```json\n{\n  \"routes\": [\n    {\n     \"app/**\": \"application.html\",\n     \"profile/**\": \"profile.html\"\n    },\n    {\"**\": \"index.html\"}\n  ]\n}\n```\n\n**redirects:** you can specify to have certain url paths be redirected (specifying a custom HTTP status code, or which defaults to 301) to other url paths by supplying an object to the `redirects` key. Route path matching is similar to using custom routes. For example:\n\nDefault 301 redirect\n\n```json\n{\n  \"redirects\": {\n    \"/some/old/path\": \"/some/new/path\"\n  }\n}\n```\n\nCustom HTTP status code\n\n```json\n{\n  \"redirects\": {\n    \"/some/old/path\": {\n      \"status\": 302,\n      \"url\": \"/some/new/path\"\n    }\n  }\n}\n```\n\nRoute segments are also supported in the redirects configuration. Segmented redirects also support custom status codes (see above):\n\n```json\n{\n  \"redirects\": {\n    \"/old/:segment/path\": \"/new/path/:segment\"\n  }\n}\n```\n\nIn this example, `/old/custom-segment/path` redirect to `/new/path/custom-segment`\n\n**error_page:** the path to the page that you want to render 404 errors if an unrecognized\nURL is supplied. For example, `error.html`.\n\n**cache_control:** by default, all pages served by superstatic have cache control headers set at\n1 hour. To change them, you can supply an object containing file globs and ages (in seconds).\nYou can also specify `false` to indicate that no caching should be performed, and a string to\nmanually set the cache control header. An example:\n\n```json\n{\n  \"cache_control\": {\n    \"nocache/**\": false,\n    \"**/*.html\": 600,\n    \"private/**\": \"private, max-age=1200\"\n  }\n}\n```\n\nNote that you can pass the `--no-cache` option when you run the server to serve all content\nwithout caching. This is good to use during development when you want fresh content served\non each request.\n\n**Headers:** Superstatic allows you to set the response headers for the given routing configuration.\n\n```json\n{\n  \"headers\": {\n    \"/cors-stuff/**\": {\n      \"Access-Control-Allow-Origin\": \"*\"\n    },\n    \"/scripts/**\": {\n      \"content-type\": \"text/javascript\"\n    }\n  }\n}\n```\n\n**trailing_slash:** Have full control over whether or not your app has or doesn't have trailing slashes. By default, Superstatic will make assumptions for on the best times to add or remove the trailing slash. Other options include `true`, which always adds a trailing slash, and `false`, which always removes the trailing slash.\n\n```json\n{\n  \"trailing_slash\": true\n}\n```\n\n## API\n\nSuperstatic is available as a middleware and a standalone [Connect](http://www.npmjs.org/package/connect) server. This means you can plug this into your current server or run your own static server using Superstatic's server.\n\n\n### Middleware\n\n```js\nvar superstatic = require('superstatic')\nvar connect = require('connect');\n\nvar app = connect()\n\t.use(superstatic(/* options */));\n\napp.listen(3000, function () {\n\n});\n\n```\n\n### `superstatic([options])`\n\nInsantiates middleware. See an [example](https://github.com/divshot/superstatic/tree/master/examples) for detail on real world use.\n\n* `options` - Optional configuration:\n  * `config` - A file path to your application's configuration file (see [Configuration](#configuration)) or an object containing your application's configuration.\n  * `protect` - Adds HTTP basic auth. Example:  `username:password`\n  * `env`- A file path your application's environment variables file or an object containing values that are available at the urls `/__/env.json` and `/__/env.js`. See the documentation detail on [environment variables](http://docs.divshot.com/guides/environment-variables).\n  * `cwd` - The current working directory to set as the root. Your application's root configuration option will be used relative to this.\n  * `services` - An object containing various Superstatic services.\n\n### Server\n\n```js\nvar superstatic = require('superstatic').server;\n\nvar app = superstatic(/* options */);\n\nvar server = app.listen(function () {\n\n});\n```\n\nSince Superstatic's server is a barebones Connect server using the Superstatic middleware, see the [Connect documentation](https://github.com/senchalabs/connect) on how to correctly instantiate, start, and stop the server.\n\n### `superstatic([options])`\n\nInstantiates a Connect server, setting up Superstatic middleware, port, host, debugging, compression, etc.\n\n* `options` - Optional configuration. Uses the same options as the middleware, plus a few more options:\n  * `port` - The port of the server. Defaults to `3474`.\n  * `host` or `hostname` - The hostname of the server. Defaults to `localhost`.\n  * `errorPage` - A file path to a custom error page. Defaults to [Superstatic's error page](https://github.com/divshot/superstatic/blob/master/lib/assets/not_found.html).\n  * `debug` - A boolean value that tells Superstatic to show or hide network logging in the console. Defaults to `false`.\n  * `gzip` - A boolean value that tells Superstatic to gzip response body. Defaults to `false`.\n\n## Run Tests\n\nIn superstatic module directory:\n\n```\nnpm install\nnpm test\n```\n\n## Contributing\n\nWe LOVE open source and open source contributors. If you would like to contribute to Superstatic, please review our [contributing guidelines](https://github.com/divshot/superstatic/blob/master/CONTRIBUTING.md) before your jump in and get your hands dirty.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/divshot/superstatic",
  "_id": "superstatic@2.2.0",
  "dist": {
    "shasum": "35f23481ff7980e7140377c7df5cc4c112e8a2f1"
  },
  "_from": "superstatic@^2.0.2",
  "_resolved": "https://registry.npmjs.org/superstatic/-/superstatic-2.2.0.tgz"
}
